SISTEMA DE MESA DE AYUDA (HELPDESK)
Documentación Técnica y Manual de Usuario
Versión 1.0

ÍNDICE

1. Introducción
2. Especificaciones Técnicas
3. Arquitectura del Sistema
4. Módulos del Sistema y su Funcionamiento
5. Base de Datos y Relaciones
6. Pruebas de Calidad
7. Manual de Usuario
8. Mantenimiento y Soporte

1. INTRODUCCIÓN

1.1 Propósito del Sistema
El Sistema de Mesa de Ayuda es una aplicación web diseñada para gestionar y dar seguimiento a tickets de soporte técnico. Permite la comunicación efectiva entre usuarios y personal de soporte, facilitando la resolución de incidencias y solicitudes.

1.2 Alcance
• Gestión completa de tickets de soporte
• Sistema de usuarios con roles diferenciados
• Seguimiento de incidencias en tiempo real
• Generación de reportes y estadísticas
• Interfaz responsive para acceso móvil

1.3 Usuarios Objetivo
• Administradores del sistema
• Personal de soporte técnico
• Usuarios finales
• Usuarios públicos (sin registro)

2. ESPECIFICACIONES TÉCNICAS

2.1 Tecnologías Utilizadas

Frontend:
• React.js 18.2.0
• Axios 1.6.2
• React Router DOM 6.20.1
• CSS3 con efectos modernos
• HTML5

Backend:
• Node.js 18.x
• Express 4.18.2
• MySQL 8.0
• bcrypt 5.1.1
• CORS habilitado

2.2 Requisitos del Sistema

Servidor:
• Node.js 18.x o superior
• MySQL 8.0 o superior
• 2GB RAM mínimo
• 10GB espacio en disco

Cliente:
• Navegador web moderno
• Conexión a Internet estable
• Resolución mínima de 1024x768

3. ARQUITECTURA DEL SISTEMA

3.1 Componentes Principales

1. Frontend (React.js)
   • Componentes modulares
   • Estado global
   • Rutas protegidas
   • Interfaz responsive

2. Backend (Express.js)
   • API RESTful
   • Middleware de autenticación
   • Validación de datos
   • Manejo de errores

3. Base de Datos (MySQL)
   • Tablas relacionales
   • Claves foráneas
   • Índices optimizados

4. MÓDULOS DEL SISTEMA Y SU FUNCIONAMIENTO

4.1 Módulo de Autenticación y Usuarios

Descripción:
Este módulo gestiona todo el proceso de autenticación y manejo de usuarios en el sistema. Es el punto de entrada para todos los usuarios y controla el acceso a las diferentes funcionalidades según el rol asignado.

Funcionamiento:
1. Registro de Usuario:
   - Ruta: POST /register
   - El frontend envía los datos del formulario de registro
   - El backend valida los datos y encripta la contraseña usando bcrypt
   - Se almacena en la tabla 'usuarios' de MySQL
   - Se genera un token JWT para la sesión

2. Inicio de Sesión:
   - Ruta: POST /login
   - Validación de credenciales contra la base de datos
   - Generación de token JWT con información del rol
   - Almacenamiento de token en sessionStorage del navegador

3. Gestión de Perfil:
   - Ruta: GET /user/:id para obtener datos
   - Ruta: PUT /update-user para actualizar información
   - Validación de permisos según rol del usuario

Conexiones:
- Frontend: Components/Login.js, Components/Register.js, Components/Profile.js
- Backend: routes/auth.js, middleware/auth.js
- Base de Datos: tabla 'usuarios'

4.2 Módulo de Gestión de Tickets

Descripción:
Centro neurálgico del sistema donde se gestionan todas las solicitudes de soporte. Permite crear, consultar, actualizar y dar seguimiento a los tickets.

Funcionamiento:
1. Creación de Tickets:
   - Ruta: POST /register-ticket
   - El usuario completa formulario con título, descripción y prioridad
   - Se genera número único de ticket
   - Se registra en base de datos con estado inicial "Abierto"
   - Se notifica a soporte técnico

2. Consulta de Tickets:
   - Ruta: GET /tickets
   - Filtrado según rol del usuario:
     * Usuario normal: solo ve sus tickets
     * Soporte: ve todos los tickets asignados
     * Administrador: ve todos los tickets
   - Implementa paginación y filtros por estado

3. Actualización de Estado:
   - Ruta: PUT /update-ticket
   - Solo personal de soporte y administradores
   - Estados posibles: Abierto, En proceso, Resuelto, Cerrado
   - Se registra historial de cambios

Conexiones:
- Frontend: Components/CreateTicket.js, Components/ConsultTickets.js
- Backend: routes/tickets.js
- Base de Datos: tablas 'tickets' y 'ticket_creadores'

4.3 Módulo de Comentarios

Descripción:
Sistema de comunicación que permite la interacción entre usuarios y personal de soporte en cada ticket.

Funcionamiento:
1. Agregar Comentarios:
   - Ruta: POST /ticket/:id/comentario
   - Se valida que el usuario tenga acceso al ticket
   - Se registra el comentario con timestamp
   - Se notifica a los involucrados

2. Consulta de Comentarios:
   - Ruta: GET /ticket/:id/comentarios
   - Muestra historial completo de comunicación
   - Ordenados cronológicamente
   - Incluye información del autor

3. Notificaciones:
   - Se envían por email cuando hay nuevos comentarios
   - Se muestran en tiempo real en la interfaz
   - Se marcan como leídos al visualizarlos

Conexiones:
- Frontend: Components/TicketComments.js
- Backend: routes/comments.js
- Base de Datos: tabla 'comentarios'

4.4 Módulo de Dashboard

Descripción:
Panel de control que muestra estadísticas y métricas importantes del sistema.

Funcionamiento:
1. Estadísticas Generales:
   - Total de tickets
   - Distribución por estado
   - Tiempo promedio de resolución
   - Tickets por categoría

2. Reportes:
   - Generación de informes PDF
   - Exportación de datos a Excel
   - Gráficos de tendencias

Conexiones:
- Frontend: Components/Dashboard.js
- Backend: routes/dashboard.js
- Base de Datos: Consultas a todas las tablas

5. BASE DE DATOS Y RELACIONES

5.1 Modelo de Datos y Relaciones

Tabla usuarios:
- id (INT PRIMARY KEY)
- nombre (VARCHAR)
- email (VARCHAR UNIQUE)
- password (VARCHAR)
- telefono (VARCHAR)
- area (VARCHAR)
- empresa (VARCHAR)
- rol (VARCHAR)

Tabla tickets:
- id (INT PRIMARY KEY)
- usuario_id (INT FK)
- titulo (VARCHAR)
- descripcion (TEXT)
- estado (VARCHAR)
- fecha_creacion (TIMESTAMP)
- ticket_number (VARCHAR UNIQUE)

Tabla comentarios:
- id (INT PRIMARY KEY)
- ticket_id (INT FK)
- usuario_id (INT FK)
- contenido (TEXT)
- fecha_creacion (TIMESTAMP)

Relaciones:
- One-to-Many con tabla tickets (un usuario puede crear múltiples tickets)
- One-to-Many con tabla comentarios (un usuario puede hacer múltiples comentarios)

5.2 Diagrama de Relaciones

usuarios 1 ----* tickets
tickets 1 ----* comentarios
usuarios 1 ----* comentarios

6. PRUEBAS DE CALIDAD

6.1 Pruebas Unitarias

Módulo de Autenticación:
• Login válido - PASÓ
• Login inválido - PASÓ
• Registro nuevo usuario - PASÓ
• Email duplicado - PASÓ

Módulo de Tickets:
• Crear ticket - PASÓ
• Actualizar estado - PASÓ
• Agregar comentario - PASÓ
• Filtrar tickets - PASÓ

6.2 Pruebas de Integración
• Flujo completo de ticket - PASÓ
• Cambio de rol de usuario - PASÓ
• Comunicación usuario-soporte - PASÓ

6.3 Pruebas de Rendimiento
• Tiempo de carga inicial: 1.2s (objetivo <2s)
• Tiempo de respuesta API: 150ms (objetivo <300ms)
• Concurrencia (100 usuarios): 98% éxito

6.4 Pruebas de Seguridad
• Inyección SQL - No vulnerable
• XSS - No vulnerable
• CSRF - Protegido
• Autenticación JWT - Implementado

7. MANUAL DE USUARIO

7.1 Acceso al Sistema
1. Abrir navegador web
2. Acceder a la URL del sistema
3. Ingresar credenciales

7.2 Crear un Ticket
1. Clic en "Nuevo Ticket"
2. Completar formulario
3. Adjuntar archivos (opcional)
4. Enviar ticket

7.3 Seguimiento de Tickets
1. Ver lista de tickets
2. Filtrar por estado
3. Agregar comentarios
4. Actualizar estado (soporte)

8. MANTENIMIENTO Y SOPORTE

8.1 Mantenimiento Preventivo
• Respaldos diarios de base de datos
• Monitoreo de logs
• Actualización de dependencias
• Revisión de rendimiento

8.2 Resolución de Problemas Comunes
• Error de conexión: Verificar servidor MySQL
• Error 404: Revisar rutas de API
• Error de autenticación: Verificar token JWT

8.3 Contacto de Soporte
Email: soporte@mesadeayuda.com
Teléfono: (123) 456-7890
Horario: 24/7

ANEXOS

A. Glosario de Términos
• Ticket: Solicitud de soporte
• JWT: JSON Web Token
• API: Application Programming Interface
• CRUD: Create, Read, Update, Delete

B. Referencias
1. Documentación de React.js
2. Documentación de Node.js
3. Estándares de seguridad OWASP
4. Guías de estilo Material Design 